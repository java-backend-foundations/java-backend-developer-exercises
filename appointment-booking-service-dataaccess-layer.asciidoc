:toc: macro
:sectnums:
:sectnumlevels: 3

= Appointment Booking Service - Data Access Layer

In this chapter we are going to create a database schema with initial data.
Then we will map it into entities model and provide operations for management of the entities.

toc::[]

== Create your component

After you have completed your own link:appointment-booking-service-setup.asciidoc[Appointment Booking Service Setup], we are going to create our first app component.

Going back to our example application, link:appointment-booking-service.asciidoc[Appointment Booking Service], we need to provide basic functionalities:

- Adding a new 'Treatment' associated with a 'Specialist'
- Retrieving a list of available 'Treatments', optionaly filtered by 'Specialist' or 'Treatment' name
- Retrieving the details of a 'Treatment' - gathering information from 'Treatment' and connected 'Specialist'
- Choosing a 'Treatment' as a 'Client' and creating an 'Appointment' for a given date and hour
- Validation of 'Appointment' date conflict by checking if the date does not colide with other Appointments assigned to a 'Specialist' (there can't be two 'Appointments' created for the same 'Specialist' at the same time)
- Possibility for a 'Client' to check their own appointments
- Cancelling the 'Appointment' by the 'Client'
- Marking the 'Appointment' as completed by the 'Specialist'
- Optional: retrieving the history of visits for a 'Client' and a 'Specialist'

To accomplish that we are going to work with five entities: _UserEntity_, _ClientEntity_, _SpecialistEntity_, _TreatmentEntity_ and _AppointmentEntity_.

image::images/dataaccess/dataaccess_entities_uml.png[width="1000", link="images/dataaccess/dataaccess_entities_uml.png"]

Each of the entities will have autogenerated id and version which specifies version number of the entity.


// TODO