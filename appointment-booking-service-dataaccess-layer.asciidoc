:toc: macro
:sectnums:
:sectnumlevels: 3

= Appointment Booking Service - Data Access Layer

In this chapter we are going to create a database schema with initial data.
Then we will map it into entities model and provide operations for management of the entities.

toc::[]

== Create your component

After you have completed your own link:appointment-booking-service-setup.asciidoc[Appointment Booking Service Setup], we are going to create our first app component.

Going back to our example application, link:appointment-booking-service.asciidoc[Appointment Booking Service], we need to provide basic functionalities:

- Adding a new `Treatment` associated with a `Specialist`
- Retrieving a list of available `Treatments`, optionaly filtered by `Specialist` or `Treatment` name
- Retrieving the details of a `Treatment` - gathering information from `Treatment` and connected `Specialist`
- Choosing a `Treatment` as a `Client` and creating an `Appointment` for a given date and hour
- Validation of `Appointment` date conflict by checking if the date does not colide with other Appointments assigned to a `Specialist` (there can`t be two `Appointments` created for the same `Specialist` at the same time)
- Possibility for a `Client` to check their own appointments
- Cancelling the `Appointment` by the `Client`
- Marking the `Appointment` as completed by the `Specialist`
- Optional: retrieving the history of visits for a `Client` and a `Specialist`

To accomplish that we are going to work with five entities: _UserEntity_, _ClientEntity_, _SpecialistEntity_, _TreatmentEntity_ and _AppointmentEntity_.

image::images/dataaccess/dataaccess_entities_uml.png[width="1000", link="images/dataaccess/dataaccess_entities_uml.png"]

Each of the entities will have autogenerated id and version which specifies version number of the entity.

The _UserEntity_ will be defined by email, passwordHash, firstname and lastname. The email will always be unique.

The _ClientEntity_ will have a _UserEntity_, which it's connected to. It will also have a collection of appointments (_AppointmentEntities_).

The _SpecialistEntity_ will be defined by a specialization (as an enum of type _Specialization_, with a converter). It will have a _UserEntity_, which it's connected to and hold a list of treatments, a certain specialist provides (_TreatmentEntities_).

The _TreatmentEntity_ will be defined by name, description and duration of the treatment (in minutes). It will have a SpecialistEntity, which describes, which specialist provides given treatment.

The _AppointmentEntity_ will be defined by dateTime and status (as an enum of type _AppointmentStatus_). It will have a _ClientEntity_ and _TreatmentEntity_, with which it's connected.

* *One-to-One Relationships*
** A *User* has a *one-to-one* relationship with *Client*.
** A *User* has a *one-to-one* relationship with *Specialist*. +
Each user can either be a *Client* or a *Specialist*, but not both.

* *One-to-Many Relationships*
** A *Specialist* has a *one-to-many* relationship with *Treatment*. +
A specialist can provide multiple treatments, but each treatment is provided by only one specialist.
** A *Client* has a *one-to-many* relationship with *Appointment*. +
A client can book multiple appointments, but each appointment belongs to only one client.
** A *Treatment* has a *one-to-many* relationship with *Appointment*. +
A treatment can be booked in multiple appointments, but each appointment refers to only one treatment.

* *Many-to-One Relationships*
** An *Appointment* has a *many-to-one* relationship with *Client*. +
Multiple appointments can belong to the same client.
** An *Appointment* has a *many-to-one* relationship with *Treatment*. +
Multiple appointments can be scheduled for the same treatment.
    
Only relationships Client - Appointment, and Specialist - Treatment are bidirectional.

=== The database

For the sake of the training we will be working with H2 database engine to create our database schema.
We will be using flyway to migrate our database scheme.

You can check that your schema is valid running AppointmentBookingAppApplication.java which recreates schema after each run. Created schema can be found in the H2 console.

image::images/dataaccess/dataaccess_database_uml.png[width="500", link="images/dataaccess/dataaccess_database_uml.png"]

Lets start with the database schema. Create a new sql file _V0001__Create_schema.sql_ in appointment-booking-app/src/main/resources/db/migration/1.0/ folder.

==== _USER_TABLE_ table

We will add our first table USER_TABLE in /appointment-booking-app/src/main/resources/db/migration/1.0/V0001__Create_schema.sql. In the case of AppointmentBookingService, the Users will provide: id, version, email etc. Additionally, emails need to be unique among all users. So we need to represent that data in our table:

[source,sql]
----
CREATE TABLE USER_TABLE (
ID NUMBER(19,0) NOT NULL AUTO_INCREMENT,
VERSION INTEGER NOT NULL,
EMAIL VARCHAR(128),
PASSWORD_HASH VARCHAR(128),
FIRST_NAME VARCHAR(128),
LAST_NAME VARCHAR(128),
PRIMARY KEY (ID),
CONSTRAINT UNIQUE_USER_EMAIL UNIQUE (EMAIL)
);
----
 
- ID: the id for each item, automatically incremented using sequence HIBERNATE_SEQUENCE.
- VERSION: used internally by JPA to take care of the optimistic locking for us.
- EMAIL: Email address of the user. Unique.
- PASSWORD_HASH: a secure way to store passwords in the database (further described in the Security Part of the exercises).
- FIRST_NAME: User's first name
- LAST_NAME: User's last name
 
We will also set the constraints:

- primary key for id to take care of it's uniqueness.
- UNIQUE_USER_EMAIL unique constraing for email column.

Notice, how we are using *USER_TABLE* instead of just *USER* as a name. USER is a reserved word, and we can't create a table with that name.

==== _CLIENT_ table

We will now add the CLIENT table in `/appointment-booking-app/src/main/resources/db/migration/1.0/V0001__Create_schema.sql`.  
Each Client is associated with a User, meaning there is a **one-to-one relationship** between the CLIENT and USER_TABLE.  

[source,sql]
----
CREATE TABLE CLIENT (
ID NUMBER(19,0) NOT NULL AUTO_INCREMENT,
VERSION INTEGER NOT NULL,
USER_ID NUMBER(19,0) NOT NULL,
PRIMARY KEY (ID),
FOREIGN KEY (USER_ID) REFERENCES USER_TABLE(ID)
);
----

- ID: the unique identifier for each client, automatically incremented.
- VERSION: used internally by JPA to handle optimistic locking.
- USER_ID: a reference to the associated user in the USER_TABLE.

We will also set the constraints:

- primary key for ID to ensure uniqueness.
- foreign key constraint linking USER_ID to the USER_TABLE.

Since a User can either be a Client or a Specialist (but not both), this table ensures proper role separation in the system.

==== _SPECIALIST_ table

Now lets add the SPECIALIST table.
Each Specialist is associated with a User, meaning there is a **one-to-one relationship** between the SPECIALIST and USER_TABLE.  
Additionally, a Specialist has a specialization field to describe their expertise.

The table should contain following columns:

- ID: the unique identifier for each specialist, automatically incremented.
- VERSION: used internally by JPA for optimistic locking.
- SPECIALIZATION: the field of expertise for the specialist (e.g. "Dentist", "Orthopaedist").
- USER_ID: a reference to the associated user in the USER_TABLE.

We will also set the constraints:

- primary key for ID to ensure uniqueness.
- foreign key constraint linking USER_ID to the USER_TABLE.

==== _TREATMENT_ table

Now lets add the TREATMENT table.
Each Treatment is provided by a Specialist, meaning there is a **many-to-one relationship** between the TREATMENT and SPECIALIST.

[source,sql]
----
CREATE TABLE TREATMENT (
(...)
SPECIALIST_ID NUMBER(19,0),
(...)
FOREIGN KEY (SPECIALIST_ID) REFERENCES SPECIALIST(ID)
);
----

The table should contain following columns:

- ID: the unique identifier for each treatment, automatically incremented.
- VERSION: used internally by JPA for optimistic locking.
- NAME: the name of the treatment (e.g., "Relaxing Massage").
- DESCRIPTION: a detailed description of the treatment.
- DURATION_MINUTES: the estimated duration of the treatment in minutes.
- SPECIALIST_ID: a reference to the Specialist providing the treatment.

We will also set the constraints:

- primary key for ID to ensure uniqueness.
- foreign key constraint linking SPECIALIST_ID to the SPECIALIST table.

==== _APPOINTMENT_ table

Finishing off, lets add the APPOINTMENT table.
Each Appointment is booked by a Client and is associated with a specific Treatment.  
This means there are **many-to-one relationships** between APPOINTMENT and both CLIENT and TREATMENT, which means two foreign keys for the APPOINTMENT table.

The table should contain following columns:

* ID: the unique identifier for each appointment, automatically incremented.
* VERSION: used internally by JPA for optimistic locking.
* DATE_TIME: the scheduled date and time for the appointment.
* STATUS: the current status of the appointment (default value: `SCHEDULED`), which can be:
** `SCHEDULED`: Appointment is booked but not yet completed.
** `CANCELLED`: Appointment has been canceled.
** `COMPLETED`: Appointment has been completed successfully. 
* CLIENT_ID: a reference to the Client who booked the appointment.
* TREATMENT_ID: a reference to the Treatment associated with the appointment.

We will also set the constraints:

- primary key for ID to ensure uniqueness.
- foreign key constraint linking CLIENT_ID to the CLIENT table.
- foreign key constraint linking TREATMENT_ID to the TREATMENT table.

A Client can book multiple Appointments, and a Treatment can have multiple Appointments, but each Appointment is linked to a single Client and a single Treatment.

Finally we can provide a certain amount of mock data to start our app. Add a new sql script /appointment-booking-app/src/main/resources/db/migration/1.0/V0002__Create_mockdata.sql adding sample data:

[%nowrap,sql]
----
-- USERS - Clients
INSERT INTO USER_TABLE(ID, VERSION, FIRST_NAME, LAST_NAME, PASSWORD_HASH, EMAIL) VALUES (-1, 0, 'Stefan', 'Kowalski', 'passwordHash1', 'stefan.kowalski@gmail.com');
INSERT INTO USER_TABLE(ID, VERSION, FIRST_NAME, LAST_NAME, PASSWORD_HASH, EMAIL) VALUES (-2, 0, 'Anna', 'Nowak', 'passwordHash2', 'annan@yahoo.com');
INSERT INTO USER_TABLE(ID, VERSION, FIRST_NAME, LAST_NAME, PASSWORD_HASH, EMAIL) VALUES (-3, 0, 'Luiza', 'Poniatowska', 'passwordHash3', 'poniatowskaluiza@o2.pl');
INSERT INTO USER_TABLE(ID, VERSION, FIRST_NAME, LAST_NAME, PASSWORD_HASH, EMAIL) VALUES (-4, 0, 'Grzegorz', 'Maniewicz', 'passwordHash4', 'g.maniewicz@gmail.com');

-- USERS - Specialists
INSERT INTO USER_TABLE(ID, VERSION, FIRST_NAME, LAST_NAME, PASSWORD_HASH, EMAIL) VALUES (-5, 0, 'Dobromir', 'Zegula', 'passwordHash5', 'zegula.d@gmail.com');
INSERT INTO USER_TABLE(ID, VERSION, FIRST_NAME, LAST_NAME, PASSWORD_HASH, EMAIL) VALUES (-6, 0, 'Monika', 'Siewiczowa', 'passwordHash6', 'monika.s@yahoo.com');
INSERT INTO USER_TABLE(ID, VERSION, FIRST_NAME, LAST_NAME, PASSWORD_HASH, EMAIL) VALUES (-7, 0, 'Andrzej', 'Piaseczny', 'passwordHash7', 'a.j.piaseczny@o2.pl');
INSERT INTO USER_TABLE(ID, VERSION, FIRST_NAME, LAST_NAME, PASSWORD_HASH, EMAIL) VALUES (-8, 0, 'Patrycja', 'Milewska', 'passwordHash8', 'milewskap@gmail.com');

-- CLIENTS
INSERT INTO CLIENT(ID, VERSION, USER_ID) VALUES (-1, 0, -1);
INSERT INTO CLIENT(ID, VERSION, USER_ID) VALUES (-2, 0, -2);
INSERT INTO CLIENT(ID, VERSION, USER_ID) VALUES (-3, 0, -3);
INSERT INTO CLIENT(ID, VERSION, USER_ID) VALUES (-4, 0, -4);

-- SPECIALISTS
INSERT INTO SPECIALIST(ID, VERSION, USER_ID, SPECIALIZATION) VALUES (-1, 0, -5, 'Dentist');
INSERT INTO SPECIALIST(ID, VERSION, USER_ID, SPECIALIZATION) VALUES (-2, 0, -6, 'Cardiologist');
INSERT INTO SPECIALIST(ID, VERSION, USER_ID, SPECIALIZATION) VALUES (-3, 0, -7, 'Pediatrician');
INSERT INTO SPECIALIST(ID, VERSION, USER_ID, SPECIALIZATION) VALUES (-4, 0, -8, 'Orthopaedist');

-- TREATMENTS
INSERT INTO TREATMENT(ID, VERSION, NAME, DESCRIPTION, DURATION_MINUTES, SPECIALIST_ID) VALUES (-1, 0, 'Konsultacja dentystyczna', 'Konsultacja dentystyczna z diagnostyką i planem leczenia', 30, -1);
INSERT INTO TREATMENT(ID, VERSION, NAME, DESCRIPTION, DURATION_MINUTES, SPECIALIST_ID) VALUES (-2, 0, 'Leczenie kanałowe', 'Leczenie kanałowe pojedynczego zęba ze znieczuleniem', 120, -1);
INSERT INTO TREATMENT(ID, VERSION, NAME, DESCRIPTION, DURATION_MINUTES, SPECIALIST_ID) VALUES (-3, 0, 'Konsultacja kardiologiczna', 'Konsultacja kardiologiczna z wstępną diagnostyką', 30, -2);
INSERT INTO TREATMENT(ID, VERSION, NAME, DESCRIPTION, DURATION_MINUTES, SPECIALIST_ID) VALUES (-4, 0, 'USG serca', 'USG serca z diagnostyką', 45, -2);
INSERT INTO TREATMENT(ID, VERSION, NAME, DESCRIPTION, DURATION_MINUTES, SPECIALIST_ID) VALUES (-5, 0, 'Konsultacja pediatryczna', 'Konsultacja pediatryczna w przypadku choroby', 20, -3);
INSERT INTO TREATMENT(ID, VERSION, NAME, DESCRIPTION, DURATION_MINUTES, SPECIALIST_ID) VALUES (-6, 0, 'Bilans 2-latka', 'Bilans dwulatka z przygotowaniem dokumentacji', 40, -3);
INSERT INTO TREATMENT(ID, VERSION, NAME, DESCRIPTION, DURATION_MINUTES, SPECIALIST_ID) VALUES (-7, 0, 'Wymaz z nosogardła', 'Wymaz pobierany z części nosowej gardła w celu diagnostycznym', 10, -3);
INSERT INTO TREATMENT(ID, VERSION, NAME, DESCRIPTION, DURATION_MINUTES, SPECIALIST_ID) VALUES (-8, 0, 'Bilans 5-latka', 'Bilans pięciolatka z przygotowaniem dokumentacji', 40, -3);
INSERT INTO TREATMENT(ID, VERSION, NAME, DESCRIPTION, DURATION_MINUTES, SPECIALIST_ID) VALUES (-9, 0, 'Płukanie żołądka', 'Interwencyjne płukanie żołądka', 30, -3);
INSERT INTO TREATMENT(ID, VERSION, NAME, DESCRIPTION, DURATION_MINUTES, SPECIALIST_ID) VALUES (-10, 0, 'Konsultacja ortopedyczna', 'Konsultacja ortopedyczna z diagnostyką', 30, -4);
INSERT INTO TREATMENT(ID, VERSION, NAME, DESCRIPTION, DURATION_MINUTES, SPECIALIST_ID) VALUES (-11, 0, 'Usunięcie haluksów', 'Operacja usunięcia haluksów z korekcję torebki stawowej i ścięgien', 75, -4);
INSERT INTO TREATMENT(ID, VERSION, NAME, DESCRIPTION, DURATION_MINUTES, SPECIALIST_ID) VALUES (-12, 0, 'Rekonstrukcja więzadła ACL', 'Rekonstrukcją więzadła krzyżowego przedniego (ACL) z zastąpieniem uszkodzonego więzadła nowym więzadłem ze ścięgien pacjenta.', 180, -4);
----

You can provide your own data or use the script above.

Run application and check that the data you provided is inserted into the database.
